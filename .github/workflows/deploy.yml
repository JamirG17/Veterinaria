name: CI/CD Docker Push
on:
  push:
    branches:
      - main
jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      frontend_changed: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'Backend/**'
            frontend:
              - 'Frontend/**'

  build_and_push_backend:
    runs-on: ubuntu-latest
    needs: [check_changes]
    if: needs.check_changes.outputs.backend_changed == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('Backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and Package Spring Boot JAR
        run: mvn -f Backend/pom.xml clean install -DskipTests

      - name: Docker Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./Backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/veterinaria-backend:latest
          file: ./Backend/Dockerfile

  build_and_push_frontend:
    runs-on: ubuntu-latest
    needs: [check_changes]
    if: needs.check_changes.outputs.frontend_changed == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'Frontend/package-lock.json'
      
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: ./Frontend

      - name: Build Angular Application (Production)
        run: npm run build -- --output-path=dist
        working-directory: ./Frontend

      - name: Docker Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./Frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/veterinaria-frontend:latest
          file: ./Frontend/Dockerfile
          
  deploy_to_vm:
    runs-on: ubuntu-latest
    needs: [build_and_push_backend, build_and_push_frontend]
    steps:
      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: opc
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "--- Descargando nuevas imágenes de Docker Hub ---"
            cd ~/Veterinaria
            
            # 1. Ejecutar pull para traer las nuevas imágenes
            # El uso de || true evita que el pipeline falle si solo hay cambios en un servicio
            docker compose pull backend frontend || true 
            
            # 2. Recrear los contenedores con las imágenes recién descargadas
            echo "--- Iniciando reconstrucción y actualización de contenedores ---"
            docker compose up -d --force-recreate backend frontend

            # 3. Mostrar el estado de los logs del backend para verificación inmediata
            echo "--- Verificando el estado del Backend ---"
            docker compose logs --tail 20 backend