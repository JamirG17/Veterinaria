# Nombre del flujo de trabajo que aparecerá en GitHub Actions
name: CI/CD Docker Push

# El flujo de trabajo se ejecuta en los siguientes eventos:
on:
  push:
    branches:
      - main # Activar el flujo solo cuando se haga push a la rama principal

# Define los jobs (tareas) que se ejecutarán
jobs:
  build_and_push:
    # Ejecutar en el sistema operativo Ubuntu más reciente
    runs-on: ubuntu-latest
    
    # Define los pasos secuenciales
    steps:
    
    # Paso 1: Checkout del código
    - name: Checkout Repository
      uses: actions/checkout@v4

    # Paso 2: Iniciar sesión en Docker Hub
    # Usaremos secretos de GitHub para mantener las credenciales seguras
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }} # jamirg17
        password: ${{ secrets.DOCKER_PASSWORD }} # Tu token de acceso
        
    # Paso 3: Configurar el constructor de Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Paso 4: Construir y Empujar la imagen del Backend (Spring Boot)
    - name: Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./Backend # Ruta al Dockerfile del Backend
        file: ./Backend/Dockerfile
        push: true
        tags: jamirg17/veterinaria-backend:latest # Etiqueta de la imagen
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Paso 5: Construir y Empujar la imagen del Frontend (Angular/Nginx)
    - name: Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./Frontend # Ruta al Dockerfile del Frontend
        file: ./Frontend/Dockerfile
        push: true
        tags: jamirg17/veterinaria-frontend:latest # Etiqueta de la imagen
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Paso 6: Confirmación
    - name: Images Pushed Successfully
      run: echo "Todas las imágenes han sido construidas y subidas a Docker Hub."
